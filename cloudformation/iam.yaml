Description: CloudFormation template to create a KMS AdminRole and to be used in KMS creation
Parameters:
  AdminGroupName:
    Type: String
    Description: "Name of the Admin group"
  DEGroupName:
    Type: String
    Description: "Name of the Data Engineering group"
  DAGroupName:
    Type: String
    Description: "Name of the Data Analysts group"
  RawZoneBucketName:
    Type: String
    Description: "Name of the Raw Zone S3 bucket"
  CleanZoneBucketName:
    Type: String
    Description: "Name of the Clean Zone S3 bucket"
  CuratedZoneBucketName:
    Type: String
    Description: "Name of the Curated Zone S3 bucket"
  ConsumptionZoneBucketName:
    Type: String
    Description: "Name of the Consumption Zone S3 bucket"
  ScriptBucketName:
    Type: String
    Description: "Name of the Scripts S3 bucket"
  TemplateBucket:
    Type: String
    Description: "Name of the CloudFormation template bucket"
Resources:
  # Create KMS AdminRole for Admin users
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AdminRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "sts:AssumeRole"
            Condition:
              StringLike:
                aws:PrincipalArn:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:user/aws-admin" # Revision: Hardcoded for now since I'm the only admin..
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  # Create KMS Role for DE users
  DERole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DERole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - athena.amazonaws.com
                - sagemaker.amazonaws.com
                - s3.amazonaws.com
                - kms.amazonaws.com
                - glue.amazonaws.com
                - dynamodb.amazonaws.com
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "sts:AssumeRole"
            Condition:
              StringLike:
                aws:PrincipalArn:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:user/*" # Revision: Use a wildcard for now since there's no other users..
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: DEServiceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/GlueServiceRole"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/DERole"
              - Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${RawZoneBucketName}/*"
                  - !Sub "arn:aws:s3:::${RawZoneBucketName}"
                  - !Sub "arn:aws:s3:::${CleanZoneBucketName}/*"
                  - !Sub "arn:aws:s3:::${CleanZoneBucketName}"
                  - !Sub "arn:aws:s3:::${CuratedZoneBucketName}/*"
                  - !Sub "arn:aws:s3:::${CuratedZoneBucketName}"
                  - !Sub "arn:aws:s3:::${ScriptBucketName}/*"
                  - !Sub "arn:aws:s3:::${ScriptBucketName}"
                  - !Sub "arn:aws:s3:::${ConsumptionZoneBucketName}/*"
                  - !Sub "arn:aws:s3:::${ConsumptionZoneBucketName}"
                  - "*" # Revision: Test Only. Need to be Removed. 
                Condition:
                  Bool:
                    "aws:SecureTransport": true
              - Effect: Allow
                Action:
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                  - "kms:ReEncrypt*"
                  - "kms:GenerateDataKey*"
                  - "kms:DescribeKey"
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              - Effect: Allow
                Action:
                  - "athena:StartQueryExecution"
                  - "athena:GetQueryExecution"
                  - "athena:GetQueryResults"
                  - "athena:StopQueryExecution"
                  - "athena:GetWorkGroup"
                Resource:
                  - !Sub "arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*"
              - Effect: Allow
                Action:
                  - "glue:*"
                Resource:
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - "lambda:List*"
                  - "lambda:Get*"
                  - "lambda:Invoke*"
                  - "lambda:Create*"
                  - "lambda:Delete*"
                  - "lambda:Update*"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
              - Effect: Allow
                Action:
                  - "sagemaker:ListNotebookInstances"
                  - "sagemaker:CreateNotebookInstance"
                  - "sagemaker:StartNotebookInstance"
                  - "sagemaker:StopNotebookInstance"
                  - "sagemaker:DeleteNotebookInstance"
                  - "sagemaker:DescribeNotebookInstance"
                  - "sagemaker:CreatePresignedNotebookInstanceUrl"
                Resource:
                  - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - "dynamodb:*" # Revision: Needs to trim down a bit more..
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
              - Effect: Allow
                Action:
                  - "apigateway:GET"
                  - "apigateway:POST"
                  - "apigateway:PUT"
                  - "apigateway:DELETE"
                  - "apigateway:OPTIONS"
                Resource:
                  - !Sub "arn:aws:apigateway:${AWS::Region}::/*"
  DARole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DARole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - athena.amazonaws.com
                - s3.amazonaws.com
            Action: "sts:AssumeRole"
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "sts:AssumeRole"
            Condition:
              StringLike:
                aws:PrincipalArn:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:user/iwu"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:user/jliu"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:user/zzhao"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
        - !Sub "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      Policies:
        - PolicyName: DAServiceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${CuratedZoneBucketName}/athena-results/*"
                  - !Sub "arn:aws:s3:::${CuratedZoneBucketName}/athena-results"
                Condition:
                  Bool:
                    "aws:SecureTransport": true
  # Admin Group Policy
  AdminGroupAssumeRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AdminGroupAssumeAdminRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Resource:
              - !GetAtt AdminRole.Arn
              - !GetAtt DERole.Arn
      Groups:
        - !Ref AdminGroupName
  # DE Group Policy
  DEGroupAssumeRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DEGroupAssumeRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Resource: !GetAtt DERole.Arn
      Groups:
        - !Ref DEGroupName
  # DA Group Policy
  DARoleAssumeRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DARoleAssumeRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Resource: !GetAtt DARole.Arn
      Groups:
        - !Ref DAGroupName
Outputs:
  AdminRoleArn:
    Description: "ARN of the Admin Role"
    Value: !GetAtt AdminRole.Arn
  DERoleArn:
    Description: "ARN of the DE Role"
    Value: !GetAtt DERole.Arn
  DARoleArn:
    Description: "ARN of the DA Role"
    Value: !GetAtt DARole.Arn
